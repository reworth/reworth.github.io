<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Jp-words-1]]></title>
    <url>%2F2018%2F01%2F04%2FJp-words-1%2F</url>
    <content type="text"><![CDATA[あいそう「愛想」 讨厌，招待 間柄「あいだがら」关系 敢えて「あえて」特意，并不 あなたの将来のために、敢えて忠告「ちゅうこく」します どうしても行きたいなら、私はあえて反対しない 浅ましい「あさましい」卑鄙 欺く「あざむく」 嘲笑う「あさわらう」 あせる「焦る、褪せる」着急 朝寝坊「あさねぼう」睡懒觉 後回し「あとまわし」推迟 彼が自分のことを後回しにしても、他の人を助けるような人だ。 あやふや 含糊 彼のあやふやな態度に、彼女は激怒「げきど」した。 過ち「あやまち」 过错 誰でも若い時は、過ちの一つや二つおかす。 あらっぽい「荒っぽい、粗っぽい」 粗野 彼はあらっぽい性格に見えますが、実は優しい人なんです。 あらかじめ「予め」 预先 あらかじめ必要なものをメモしていくと、無駄な買い物をしない。 ありのまま 老实，坦白 ありのままの私を認めてくれる人と結婚したいと思っている 案の定「あんのじょう」果然，果如所料 連休中の新幹線は、案の定、込んでいた。 いかにも 果然 いかにも、おっしゃる通りです。彼はいかにも優等生のダイプだ。 幾多「いくた」许多 父は、幾多の困難を乗り越えて、会社大きくしてきたそうだ 一括「いっかつ」 汇总。一包在内 時間がないので、三つの議案を一括して審議「しんぎ」する 意図「いと」 意图 著者のいとがよくわからない本だ 今更「いまさら」 事到如今 いまさら謝られでも、もう遲い。 いやいや「嫌々」 勉勉强强 内訳「うちわけ」 详细内容 進歩「しんぽ」 进步]]></content>
      <categories>
        <category>japaness</category>
      </categories>
      <tags>
        <tag>japaness</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vagrant]]></title>
    <url>%2F2018%2F01%2F04%2Fvagrant%2F</url>
    <content type="text"><![CDATA[Vagrant常用命令Vagrant Cmd： vagrant box add 添加box的操作 vagrant init 初始化box的操作 vagrant up 启动虚拟机的操作 vagrant ssh 登录虚拟机的操作 Vagrant还包括如下一些操作： vagrant box list 显示当前已经添加的box列表 $ vagrant box list base (virtualbox) vagrant box remove 删除相应的box $ vagrant box remove base virtualbox Removing box &apos;base&apos; with provider &apos;virtualbox&apos;... vagrant destroy 停止当前正在运行的虚拟机并销毁所有创建的资源 $ vagrant destroy Are you sure you want to destroy the &apos;default&apos; VM? [y/N] y [default] Destroying VM and associated drives... vagrant halt 关机 $ vagrant halt [default] Attempting graceful shutdown of VM... vagrant package 打包命令，可以把当前的运行的虚拟机环境进行打包 $ vagrant package [default] Attempting graceful shutdown of VM... [default] Clearing any previously set forwarded ports... [default] Creating temporary directory for export... [default] Exporting VM... [default] Compressing package to: /Users/astaxie/vagrant/package.box vagrant plugin 用于安装卸载插件 vagrant provision 通常情况下Box只做最基本的设置，而不是设置好所有的环境，因此Vagrant通常使用Chef或者Puppet来做进一步的环境搭建。那么Chef或者Puppet称为provisioning，而该命令就是指定开启相应的provisioning。按照Vagrant作者的说法，所谓的provisioning就是”The problem of installing software on a booted system”的意思。除了Chef和Puppet这些主流的配置管理工具之外，我们还可以使用Shell来编写安装脚本。 例如： vagrant provision --provision-with chef vagrant reload 重新启动虚拟机，主要用于重新载入配置文件 $ vagrant reload [default] Attempting graceful shutdown of VM... [default] Setting the name of the VM... [default] Clearing any previously set forwarded ports... [default] Creating shared folders metadata... [default] Clearing any previously set network interfaces... [default] Preparing network interfaces based on configuration... [default] Forwarding ports... [default] -- 22 =&gt; 2222 (adapter 1) [default] Booting VM... [default] Waiting for VM to boot. This can take a few minutes. [default] VM booted and ready for use! [default] Setting hostname... [default] Mounting shared folders... [default] -- /vagrant vagrant resume 恢复前面被挂起的状态 $vagrant resume [default] Resuming suspended VM... [default] Booting VM... [default] Waiting for VM to boot. This can take a few minutes. [default] VM booted and ready for use! vagrant ssh-config 输出用于ssh连接的一些信息 $vagrant ssh-config Host default HostName 127.0.0.1 User vagrant Port 2222 UserKnownHostsFile /dev/null StrictHostKeyChecking no PasswordAuthentication no IdentityFile &quot;/Users/astaxie/.vagrant.d/insecure_private_key&quot; IdentitiesOnly yes LogLevel FATAL vagrant status 获取当前虚拟机的状态 $vagrant status Current machine states: default running (virtualbox) The VM is running. To stop this VM, you can run `vagrant halt` to shut it down forcefully, or you can run `vagrant suspend` to simply suspend the virtual machine. In either case, to restart it again, simply run `vagrant up`. vagrant suspend 挂起当前的虚拟机 $ vagrant suspend [default] Saving VM state and suspending execution... 模拟打造多机器的分布式系统前面这些单主机单虚拟机主要是用来自己做开发机，从这部分开始的内容主要将向大家介绍如何在单机上通过虚拟机来打造分布式造集群系统。这种多机器模式特别适合以下几种人： 快速建立产品网络的多机器环境，例如web服务器、db服务器 建立一个分布式系统，学习他们是如何交互的 测试API和其他组件的通信 容灾模拟，网络断网、机器死机、连接超时等情况 Vagrant支持单机模拟多台机器，而且支持一个配置文件Vagrntfile就可以跑分布式系统。 现在我们来建立多台VM跑起來，並且让他们之间能够相通信，假设一台是应用服务器、一台是DB服务器，那么这个结构在Vagrant中非常简单，其实和单台的配置差不多，你只需要通过config.vm.define来定义不同的角色就可以了，现在我们打开配置文件进行如下设置： Vagrant.configure(&quot;2&quot;) do |config| config.vm.define :web do |web| web.vm.provider &quot;virtualbox&quot; do |v| v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;web&quot;, &quot;--memory&quot;, &quot;512&quot;] end web.vm.box = &quot;base&quot; web.vm.hostname = &quot;web&quot; web.vm.network :private_network, ip: &quot;11.11.1.1&quot; end config.vm.define :db do |db| db.vm.provider &quot;virtualbox&quot; do |v| v.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;db&quot;, &quot;--memory&quot;, &quot;512&quot;] end db.vm.box = &quot;base&quot; db.vm.hostname = &quot;db&quot; db.vm.network :private_network, ip: &quot;11.11.1.2&quot; end end 这里的设置和前面我们单机设置配置类似，只是我们使用了:web以及:db分別做了两个VM的设置，并且给每个VM设置了不同的hostname和IP，设置好之后再使用vagrant up将虚拟机跑起来： $ vagrant up Bringing machine &apos;web&apos; up with &apos;virtualbox&apos; provider... Bringing machine &apos;db&apos; up with &apos;virtualbox&apos; provider... [web] Setting the name of the VM... [web] Clearing any previously set forwarded ports... [web] Creating shared folders metadata... [web] Clearing any previously set network interfaces... [web] Preparing network interfaces based on configuration... [web] Forwarding ports... [web] -- 22 =&gt; 2222 (adapter 1) [web] Running any VM customizations... [web] Booting VM... [web] Waiting for VM to boot. This can take a few minutes. [web] VM booted and ready for use! [web] Setting hostname... [web] Configuring and enabling network interfaces... [web] Mounting shared folders... [web] -- /vagrant [db] Setting the name of the VM... [db] Clearing any previously set forwarded ports... [db] Fixed port collision for 22 =&gt; 2222. Now on port 2200. [db] Creating shared folders metadata... [db] Clearing any previously set network interfaces... [db] Preparing network interfaces based on configuration... [db] Forwarding ports... [db] -- 22 =&gt; 2200 (adapter 1) [db] Running any VM customizations... [db] Booting VM... [db] Waiting for VM to boot. This can take a few minutes. [db] VM booted and ready for use! [db] Setting hostname... [db] Configuring and enabling network interfaces... [db] Mounting shared folders... [db] -- /vagrant 看到上面的信息输出后，我们就可以通过vagrant ssh登录虚拟机了，但是这次和上次使用的不一样了，这次我们需要指定相应的角色，用来告诉ssh你期望连接的是哪一台： $ vagrant ssh web vagrant@web:~$ $ vagrant ssh db vagrant@db:~$ 是不是很酷！现在接下来我们再来验证一下虚拟机之间的通信，让我们先使用ssh登录web虚拟机，然后在web虚拟机上使用ssh登录db虚拟机(默认密码是vagrant)： $ vagrant ssh web Linux web 2.6.32-38-server #83-Ubuntu SMP Wed Jan 4 11:26:59 UTC 2012 x86_64 GNU/Linux Ubuntu 10.04.4 LTS Welcome to the Ubuntu Server! * Documentation: http://www.ubuntu.com/server/doc New release &apos;precise&apos; available. Run &apos;do-release-upgrade&apos; to upgrade to it. Welcome to your Vagrant-built virtual machine. Last login: Thu Aug 8 18:55:44 2013 from 10.0.2.2 vagrant@web:~$ ssh 11.11.1.2 The authenticity of host &apos;11.11.1.2 (11.11.1.2)&apos; can&apos;t be established. RSA key fingerprint is e7:8f:07:57:69:08:6e:fa:82:bc:1c:f6:53:3f:12:9e. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &apos;11.11.1.2&apos; (RSA) to the list of known hosts. vagrant@11.11.1.2&apos;s password: Linux db 2.6.32-38-server #83-Ubuntu SMP Wed Jan 4 11:26:59 UTC 2012 x86_64 GNU/Linux Ubuntu 10.04.4 LTS Welcome to the Ubuntu Server! * Documentation: http://www.ubuntu.com/server/doc New release &apos;precise&apos; available. Run &apos;do-release-upgrade&apos; to upgrade to it. Welcome to your Vagrant-built virtual machine. Last login: Thu Aug 8 18:58:50 2013 from 10.0.2.2 vagrant@db:~$ 通过上面的信息我们可以看到虚拟机之间通信是畅通的，所以现在开始你伟大的架构设计吧，你想设计怎么样的架构都可以，唯一限制你的就是你主机的硬件配置了。]]></content>
      <categories>
        <category>vagrant</category>
      </categories>
      <tags>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo cmd]]></title>
    <url>%2F2018%2F01%2F03%2Fhexo-cmd%2F</url>
    <content type="text"><![CDATA[Hexo Cmd hexo help # 查看帮助hexo version #查看Hexo的版本hexo algolia # 更新search庫hexo new “postName” #新建文章hexo new post “title” # 生成新文章：\source_posts\title.md，可省略posthexo new page “pageName” #新建页面hexo clean #清除部署緩存hexo n == hexo new #新建文章hexo g == hexo generate #生成静态页面至public目录hexo s == hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo d == hexo deploy #将.deploy目录部署到GitHubhexo d -g #生成加部署hexo s -g #生成加预览 Clean&amp;Updatehexo cl hexo d -g]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flask definitions]]></title>
    <url>%2F2018%2F01%2F03%2Fflask-definitions%2F</url>
    <content type="text"><![CDATA[Flask’s some definitions WSGI: Web服务器网关接口，是一种Web服务使用的协议 路由: 处理URL和函数之间关系的程序称为”路由” 视图函数: 类似于index()这样的，被app.route装饰器注册为路由的函数，或者通过app.add_url_rule()添加路由映射关系的函数，被称为视图函数。 app.route(): 路由装饰器，可以带参数，参数可以指定数据类型：int/float/path。path类似于字符串，但不将反斜线/当做分隔符。 Flask上下文全局变量 current_app: 程序上下文，当前激活程序的程序实例，所有线程公用一个该实例。 g: 程序上下文，处理请求时用作临时存储的对象，每次请求都会重设这个变量 request: 请求上下文，请求对象，封装了客户端发出的 HTTP 请求中的内容，不同线程之间互不干扰 session: 请求上下问，用户会话，用于存储请求之间需要“记住”的值的词典。 Flask支持的4种钩子函数 before_first_request: 注册一个函数，在处理第一个请求之前运行。 before_request: 注册一个函数，在每次请求之前运行。 after_request: 注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。 teardown_request:注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。 Jinja2模板使用渲染模板: render_template(“user.html”, name=name)控制结构：1234567891011&#123;% if user %&#125; Hello, &#123;&#123; user &#125;&#125;! &#123;% else %&#125; Hello, Stranger! &#123;% endif %&#125; &lt;ul&gt; &#123;% for comment in comments %&#125; &lt;li&gt;&#123;&#123; comment &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; 宏-类似于函数:123456789 &#123;% macro render_comment(comment) %&#125; &lt;li&gt;&#123;&#123; comment &#125;&#125;&lt;/li&gt; &#123;% endmacro %&#125; &lt;ul&gt; &#123;% for comment in comments %&#125; &#123;&#123; render_comment(comment) &#125;&#125; &#123;% endfor %&#125; &lt;/ul&gt; Jinja2变量过滤器 # safe: 渲染值时不转义# capitalize: 把值的首字母转换成大写，其他字母转换成小写# lower: 把值转换成小写形式# upper: 把值转换成大写形式# title: 把值中每个单词的首字母都转换成大写# trim: 把值的首尾空格去掉# striptags: 渲染之前把值中所有的 HTML 标签都删掉 WTForms支持的字段注意添加app.config[‘SECRET_KEY’] = ‘hard to guess string’ StringField 文本字段 TextAreaField 多行文本字段 PasswordField 密码文本字段 HiddenField 隐藏文本字段 DateField 值为datatime.data格式的文本字段 DateTimeField 值为datatime.datatime格式的文本字段 DecimalField 值为decimal.Decimal格式的文本字段 IntegerField 值为整数的文本字段 FloatField 值为浮点数的文本字段 BooleanField 值为True或False的复选框 RadioField 一组单选框 SelectField 值唯一的下拉列表 SelectMultipleField 可选多个值得下拉列表 FileField 文件上传字段 SubmitField 表单提交按钮 FormField 把表单作为字段嵌入另一个表单 FieldList 一组指定类型的字段 常见返回码200 OK - [GET]：服务器成功返回用户请求的数据201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功202 Accepted - []：表示一个请求已经进入后台排队（异步任务）204 NO CONTENT - [DELETE]：用户删除数据成功400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作401 Unauthorized - []：表示用户没有权限（令牌、用户名、密码错误）403 Forbidden - [] 表示用户得到授权（与401错误相对），但是访问是被禁止的404 NOT FOUND - []：用户发出的请求针对的是不存在的记录，服务器没有进行操作406 Not Acceptable - [GET]：用户请求的格式不可得410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sed-grep]]></title>
    <url>%2F2018%2F01%2F01%2Fsed-grep%2F</url>
    <content type="text"><![CDATA[sedsed对文本的处理非常的强大，并且sed非常小，操作跟awk类似。sed是按顺序逐行进行读取文件。然后，它执行的是该行指定的所有操作，并在完成请求的修改之后的内容显示出来，也可以将其存放到文件之中。 sed [-nefri] [动作] -n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。 -e ：直接在命令列模式上进行 sed 的动作编辑； -f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作； -r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法) -i ：直接修改读取的文件内容，而不是输出到终端。 –follow-symlinks 直接修改文件时跟随软链接 动作说明 ： [n1[,n2]]fuctionn1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』 funtion： a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～ c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！ d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚； i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)； p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～ s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！ grep命令格式： grep [option] pattern file 参数 -i：忽略大小写 -c：打印匹配的行数 -v：查找不包含匹配项的行 -n：打印包含匹配项的行和行标 正则表达式 ^ #锚定行的开始 如：’^grep’匹配所有以grep开头的行。$ #锚定行的结束 如：’grep$’匹配所有以grep结尾的行。. #匹配一个非换行符的字符 如：’gr.p’匹配gr后接一个任意字符，然后是p。* #匹配零个或多个先前字符 如：’grep’匹配所有一个或多个空格后紧跟grep的行。. #一起用代表任意字符。[] #匹配一个指定范围内的字符，如’[Gg]rep’匹配Grep和grep。[^] #匹配一个不在指定范围内的字符，如：’[^A-FH-Z]rep’匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。(..) #标记匹配字符，如’(love)‘，love被标记为1。\&lt; #锚定单词的开始，如:’\‘匹配包含以grep结尾的单词的行。x{m} #重复字符x，m次，如：’0{5}‘匹配包含5个o的行。x{m,} #重复字符x,至少m次，如：’o{5,}‘匹配至少有5个o的行。x{m,n} #重复字符x，至少m次，不多于n次，如：’o{5,10}‘匹配5–10个o的行。\w #匹配文字和数字字符，也就是[A-Za-z0-9]，如：’G\w*p’匹配以G后跟零个或多个文字或数字字符，然后是p。\W #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sed</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[awk]]></title>
    <url>%2F2017%2F12%2F29%2Fawk%2F</url>
    <content type="text"><![CDATA[awkawk是一种处理文本的语言，是一个强大的文本分析工具，awk是以列为划分记数的，$0表示所有列，$1表示第一列，$2表示第二列。 awk常用参数 -F指定输入文件分隔符，如-F： -v 赋值一个用户定义变量，如-va=1 -f 从脚本文件中读取awk命令 多个分隔符awk -F &#39;[-|]&#39; &#39;{print $3}&#39; data上面这个例子是以-和|为分隔符进行分割。 设置变量设置awk自定义变量，使用参数-vcat data.txt | awk -v a=9 &#39;{print $1,$1+a}&#39;如上，设置了变量a的值，在输出的时候添加一个$1+a的值。如果在脚本中使用的时候，前面已经定义了一个$2的变量，并且你就是像要使用这个变量的话，就要使用以下的形式：awk &#39;{print $$2}&#39; 逻辑判断cat data.txt | awk &#39;$1==&quot;reworth&quot; {print}输出第一列为reworth的所有行。cat data.txt | awk &#39;$1!=&quot;reworth&quot; {print}&#39;输出第一列不是reworth的所有行。 正则匹配cat data.txt | awk &#39;$2 ~ /reworth.*/ {print}&#39;匹配第二列中以reworth开头的所有行。对某列进行匹配时需要在列之后加个～表示进行匹配。cat data.txt | awk &#39;/reworth.*/ {print}&#39;匹配以reworth开头的所有行。匹配取反 !~cat data.txt | awk &#39;$2 !~ /reworth/ {print}&#39;匹配第二列不是reworth的所有行。 内置变量 FILENAME : 当前输入文件名称 NF : 当前输入行的字段编号 OFS : 输出字段分隔符 NR : 当前输入行编号(是指输入行 1，2，3……等) FS : 输入字段分隔符 ORS : 输出记录分隔符 RS : 输入记录分隔符 内置函数substr字符串截取cat data.txt | awk &#39;{print substr($1,1,4)}&#39;截取第一列中的第一个到第四个字符。split 切片cat data.txt |awk &#39;{split($1,a,&quot;,&quot;);print a[1],a[2],a[3]}&#39;以逗号分隔第一列，并输出分隔后的数据。gsub 替换cat data.txt | awk &#39;&#39;{gsub(&quot;abc&quot;,&quot;asd&quot;,$2);print}将第二列中的abc替换成asd 统计 grep ‘tower_activity_op’ /data/s*/log/test.log | awk -F’[=,]’ ‘{a[$2] -= $12; b[$2] -= $14; item_count[$2]++;} END{for(i in a) {serverid=i; cmd=”/usr/bin/mysql -u root -h \”192.168.0.1\” -p1234 -D stat -e \”replace into test(date,uid,cash,coins,number,code,serverid) values(\047’$Date’\047,”i”,”a[i]”,”b[i]”,”item_count[i]”,\047测试\047,”serverid”)\””; system(cmd);}}’]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[volume-container]]></title>
    <url>%2F2017%2F12%2F28%2Fvolume-container%2F</url>
    <content type="text"><![CDATA[volume container是专门为其他容器提供volume的容器。它提供的卷可以是bind mount,也可以是docker managed volume.下面我创建一个volume container:1234docker create --name vc_data \ -v ~/htdocs:/usr/local/apache2/htdocs \ -v ~/other/useful/tools \ busybox 我们将容器命名为vc_data.注意这里执行的是docker create命令，这是因为volume container的作用是只提供数据，它本身不需要处于运行状态。容器中mount了两个volume: bind mount,存放web server的静态文件。 docker managed volume,存放一些实用的工具通过docker inspect可以查看这两个volume]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>volume</tag>
      </tags>
  </entry>
</search>
